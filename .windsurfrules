# Avukat Portföy Sitesi - Proje Kuralları

## 🎯 Proje Genel Bilgileri
- Bu bir avukat portföy sitesidir
- Hedef kitle: 40'lı yaşlardaki avukata ihtiyacı olan kişiler
- React kullan, Next.js kullanma
- Mevcut Header.jsx dosyası korunmalı ve kullanılmalı

## 🎨 Tasarım ve Stil Kuralları

### Renk Paleti
- Hafif ve sade renkler kullan
- Renklerin birbiriyle uyumlu olmasına dikkat et
- Profesyonel ve güvenilir görünüm için soft tonlar tercih et
- Örnek renkler: #f8fafc, #e2e8f0, #64748b, #334155, #1e293b
- Vurgu renkleri için: #3b82f6, #1d4ed8 gibi güvenilir maviler

### Tipografi
- Yazı tiplerini olabildiğince sade tut
- Okunabilirlik öncelikli
- Font weight'leri: 300, 400, 500, 600 arası kullan
- Font family: Inter, system-ui, sans-serif tercih et

### Görünüm
- Sayfa soft ve hoş görünüme sahip olmalı
- Yumuşak gölgeler ve border-radius kullan
- Minimal ve temiz tasarım anlayışı
- Boşlukları (spacing) bol kullan

## 🔧 Teknik Kurallar

### React Kuralları
- Fonksiyonel component'ler kullan (function declaration)
- Her component için ayrı dosya oluştur
- Component isimleri PascalCase olmalı
- Dosya isimleri .jsx uzantılı olmalı

### Component Yapısı
- Her bölümü ayrı component'e böl:
  - Header.jsx (mevcut dosya korunacak)
  - Home.jsx
  - Body.jsx
  - Footer.jsx
  - Services.jsx
  - About.jsx
  - Contact.jsx
- Component'ler /src/components/ klasöründe olmalı
- Her component kendi klasöründe olabilir

### Dosya Yapısı
```
src/
├── components/
│   ├── Header/
│   │   └── Header.jsx
│   ├── Home/
│   │   └── Home.jsx
│   ├── Body/
│   │   └── Body.jsx
│   └── ...
├── redux/
│   ├── store.js
│   ├── slices/
│   │   ├── userSlice.js
│   │   ├── contactSlice.js
│   │   └── ...
│   └── ...
├── pages/
├── assets/
└── utils/
```

### JavaScript Kuralları
- Basit ve anlaşılır kod yaz
- Karmaşık çözümler yerine basit yolları tercih et
- ES6+ özelliklerini kullan (arrow functions, destructuring, etc.)
- Değişken isimleri camelCase olmalı
- Anlamlı ve açıklayıcı isimler kullan

### Redux Toolkit Kullanım Kuralları
- Global state için Redux Toolkit kullan
- Mevcut Redux dosyaları ve yapısı korunmalı
- Component state yerine redux state tercih et (önemli veriler için)
- Action'ları slice içinde tanımla
- Async işlemler için createAsyncThunk kullan
- Redux state'i doğrudan mutate etme, immer kullan
- Örnek kullanım:
  ```javascript
  // Redux state'ten veri çek
  const userData = useSelector(state => state.user.data);
  
  // Action dispatch et
  const dispatch = useDispatch();
  dispatch(updateUserData(newData));
  ```

## 📚 Kütüphane Kullanımı

### İzin Verilen Kütüphaneler
- React Icons: import { IconName } from 'react-icons/fa'
- Material-UI (MUI): import { Component } from '@mui/material'
- Tailwind CSS: tüm utility class'ları kullanılabilir
- Redux Toolkit: State yönetimi için (mevcut dosyalar kullanılacak)

### Redux Toolkit Kuralları
- State yönetimi için Redux Toolkit kullan
- Mevcut Redux dosyaları korunmalı ve kullanılmalı
- createSlice kullanarak slice'ları oluştur
- configureStore ile store yapılandır
- useSelector ve useDispatch hook'larını kullan
- Redux DevTools entegrasyonu aktif olsun

### Yasak Kütüphaneler
- Next.js kullanma
- Başka CSS framework'leri kullanma (sadece Tailwind)

## 🎨 CSS ve Styling Kuralları

### Tailwind CSS
- Tüm stilleri Tailwind utility class'ları ile yap
- Custom CSS yazmaktan kaçın
- Responsive design için Tailwind breakpoint'lerini kullan
- Hover ve focus state'leri ekle

### Responsive Design
- Mobile-first yaklaşım
- Breakpoint'ler: sm:, md:, lg:, xl:
- Her component responsive olmalı

## 📱 UX/UI Kuralları

### Kullanıcı Deneyimi
- 40'lı yaşlardaki kullanıcılar için optimize et
- Büyük ve okunabilir font boyutları
- Kolay navigasyon
- Hızlı yükleme süreleri
- Erişilebilirlik (accessibility) kurallarına uy

### Profesyonel Görünüm
- Güvenilir ve ciddi bir imaj
- Soft ve hoş görünüm
- Temiz ve düzenli layout
- Consistent spacing ve alignment

## 🔍 SEO ve Performance
- Semantic HTML kullan
- Alt text'leri ekle
- Meta tag'leri unutma
- Lazy loading uygula
- Optimize edilmiş görseller kullan

## 📝 Kod Yazım Kuralları

### Naming Convention
- Component'ler: PascalCase (Header, ContactForm)
- Dosyalar: PascalCase.jsx (Header.jsx)
- Değişkenler: camelCase (userName, isActive)
- CSS class'ları: Tailwind utility class'ları

### Code Organization
- Import'ları üstte grupla
- Export'u dosya sonunda yap
- Prop'ları destructure et
- Clean code prensiplerini uygula

### Yorum Satırı Kuralları
- Her fonksiyon için 1-2 cümlelik açıklama yorum ekle
- Karmaşık kod bloklarının üstüne ne yaptığını açıkla
- Yorum satırları Türkçe olmalı
- Örnek format:
  ```javascript
  // Kullanıcı form verilerini doğrular ve gönderir
  const handleSubmit = (formData) => {
    // Form verilerini API'ye gönder
    submitToAPI(formData);
  }
  ```

### Dil Kuralları
- Tüm yorum satırları Türkçe olmalı
- Console.log mesajları Türkçe olsun
- Error mesajları Türkçe yazılsın
- Alert ve bildirim metinleri Türkçe olmalı
- Değişken ve fonksiyon isimleri İnglizce (camelCase)

## 🚀 Development Practices
- Component'leri küçük ve focused tut
- Reusable component'ler yaz
- Props validation kullan (propTypes)
- Console.log'ları production'da kaldır
- Error handling ekle

## 💡 Best Practices
- DRY (Don't Repeat Yourself) prensibini uygula
- Single Responsibility Principle
- Basit ve anlaşılır kod yaz
- Comment'ları gerektiğinde kullan
- Git commit message'larını açıklayıcı yaz

## 📋 Kod Dokümantasyon Kuralları
- Her component'in başına ne yaptığını açıklayan yorum ekle
- Prop'ların ne olduğunu açıkla
- Önemli state değişkenleri için açıklama yaz
- API çağrıları öncesi ne yapıldığını belirt
- Örnek dokümantasyon:
  ```javascript
  /**
   * Avukat iletişim formu component'i
   * Kullanıcıdan ad, email ve mesaj alır
   */
  function ContactForm() {
    // Form gönderim durumunu takip eder
    const [isSubmitting, setIsSubmitting] = useState(false);
    
    // Form verilerini API'ye gönderir
    const handleSubmit = async (formData) => {
      // Gönderim başladığında yükleme göster
      setIsSubmitting(true);
    };
  }
  ```